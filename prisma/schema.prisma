generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name          String
  email         String
  emailVerified Boolean @default(false)
  image         String?

  Cart Cart?

  sessions Session[]
  accounts Account[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt DateTime
  token     String
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  @@map("accounts")
}

model Verification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  imageUrl String

  productItems ProductItem[]
  ingredients  Ingredient[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@map("products")
}

model ProductItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price Float

  sizeId String?
  size   PizzaSize? @relation(fields: [sizeId], references: [id], onDelete: SetNull)

  typeId String?
  type   PizzaType? @relation(fields: [typeId], references: [id], onDelete: SetNull)

  cartItems CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("product_items")
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  slug String @unique

  products Product[]

  @@map("categories")
}

model PizzaSize {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  size        Int
  label       String
  ProductItem ProductItem[]
}

model PizzaType {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        String
  ProductItem ProductItem[]
}

model Ingredient {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String @unique
  price    Float
  imageUrl String

  products    Product[]
  ingredients CartItem[]

  @@map("ingredients")
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token String

  items CartItem[]

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity    Int          @default(1)
  ingredients Ingredient[]

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId String

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  @@map("cart_items")
}

enum UserRole {
  USER
  ADMIN
}
